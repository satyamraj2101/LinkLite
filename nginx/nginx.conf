server {
    # Server name
    server_name satyamraj.tech www.satyamraj.tech;

    # Listen on port 80 for HTTP
    listen 80;  # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;  # Redirect to HTTPS
}

server {
    # Listen on port 443 for HTTPS
    listen 443 ssl;  # Enable SSL
    server_name satyamraj.tech www.satyamraj.tech;

    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/satyamraj.tech/fullchain.pem;  # Path to your SSL certificate
    ssl_certificate_key /etc/letsencrypt/live/satyamraj.tech/privkey.pem;  # Path to your SSL certificate key
    include /etc/letsencrypt/options-ssl-nginx.conf;  # SSL options
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;  # DH parameters

    # Main location block for serving frontend files and handling API requests
    location / {
        # Try to serve static files first, if not found, pass to backend
        root /home/ubuntu/LinkLite/frontend;  # Path to your frontend files
        index index.html;  # Specify the default index file
        try_files $uri $uri/ @backend;  # Serve static files or forward to backend
    }

    # Fallback for handling all backend requests
    location @backend {
        proxy_pass http://localhost:3000;  # Forward all requests to your backend
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Authentication endpoint
    location /auth/ {
        proxy_pass http://localhost:3000/auth/;  # Your backend authentication endpoint
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Create link endpoint
    location /links/create {
        proxy_pass http://localhost:3000/links/create;  # Redirect to create link
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # My links endpoint
    location /links/my-links {
        proxy_pass http://localhost:3000/links/my-links;  # Redirect to my links
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # General links endpoint
    location /links/ {
        proxy_pass http://localhost:3000/links/;  # Redirect to general links
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Error handling
    error_page 404 /404.html;  # Custom 404 page
    location = /404.html {
        internal;  # Only internal redirects to this location
    }

    error_page 500 502 503 504 /50x.html;  # Custom 50x error page
    location = /50x.html {
        internal;  # Only internal redirects to this location
    }
}
